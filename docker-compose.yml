version: '3.9'

services:

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network

  postgres:
    image: postgres:14
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: OrderDb
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  orderservice:
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    container_name: orderservice
    depends_on:
      - rabbitmq
      - postgres
    restart: always
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__OrderDb=Host=postgres;Port=5432;Database=OrderDb;Username=admin;Password=admin123
    networks:
      - app-network

  stockservice:
    build:
      context: .
      dockerfile: StockService/Dockerfile
    container_name: stockservice
    depends_on:
      - rabbitmq
      - postgres
    ports:
      - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__StockDb=Host=postgres;Port=5432;Database=StockDb;Username=admin;Password=admin123
    networks:
      - app-network

  notificationservice:
    build:
      context: .
      dockerfile: NotificationService/Dockerfile
    container_name: notificationservice
    depends_on:
      - rabbitmq
      - postgres
    ports:
      - "5003:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__NotificationDb=Host=postgres;Port=5432;Database=NotificationDb;Username=admin;Password=admin123
    networks:
      - app-network

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
